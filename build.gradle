plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.ingsis.jcli'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/JulietaG13/PrintScript")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

ext {
    set('springCloudVersion', "2023.0.3") // for openfeign
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.ingsis.jcli:runner:1.1.13'
    implementation 'com.ingsis.jcli:common:1.1.13'
    implementation 'com.google.code.gson:gson:2.8.9'
}

dependencyManagement {  // for openfeign
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

//Checkstyle set up
checkstyle {
    toolVersion = '10.3.3'
    ignoreFailures = false
    maxWarnings = 0
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

//Coverage set up
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = file("${buildDir}/jacocoHtml")
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

// Code formatting configuration
spotless {
    java {
        googleJavaFormat()
    }
    kotlin {
        ktlint()
    }
}